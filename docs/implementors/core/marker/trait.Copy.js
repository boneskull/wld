(function() {var implementors = {};
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = u8&gt; + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Index: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CapacityError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["backtrace"] = [{"text":"impl Copy for PrintFmt","synthetic":false,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for BitIdx&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for BitPos&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for BitMask&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Msb0","synthetic":false,"types":[]},{"text":"impl Copy for Lsb0","synthetic":false,"types":[]}];
implementors["byteio"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Copy for PodCastError","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]}];
implementors["conv"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for GeneralError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for GeneralErrorKind","synthetic":false,"types":[]},{"text":"impl Copy for NoError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Unrepresentable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for NegOverflow&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for PosOverflow&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FloatError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for RangeError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RangeErrorKind","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T&gt; Copy for Shared&lt;'g, T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl Copy for PopError","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for PushError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CachePadded&lt;T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Copy for Compression","synthetic":false,"types":[]},{"text":"impl Copy for SpecialOptions","synthetic":false,"types":[]},{"text":"impl Copy for CompressionOptions","synthetic":false,"types":[]},{"text":"impl Copy for MatchingType","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Copy, R:&nbsp;Copy&gt; Copy for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["failure"] = [{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for Compat&lt;E&gt;","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["gif"] = [{"text":"impl Copy for DisposalMethod","synthetic":false,"types":[]},{"text":"impl Copy for Block","synthetic":false,"types":[]},{"text":"impl Copy for Extension","synthetic":false,"types":[]}];
implementors["image"] = [{"text":"impl Copy for Rect","synthetic":false,"types":[]},{"text":"impl Copy for BiLevel","synthetic":false,"types":[]},{"text":"impl Copy for FilterType","synthetic":false,"types":[]},{"text":"impl Copy for SampleLayout","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for NormalForm","synthetic":false,"types":[]},{"text":"impl Copy for DXTVariant","synthetic":false,"types":[]},{"text":"impl Copy for RGBE8Pixel","synthetic":false,"types":[]},{"text":"impl Copy for PixelDensityUnit","synthetic":false,"types":[]},{"text":"impl Copy for PixelDensity","synthetic":false,"types":[]},{"text":"impl Copy for SampleEncoding","synthetic":false,"types":[]},{"text":"impl Copy for PNMSubtype","synthetic":false,"types":[]},{"text":"impl Copy for BitmapHeader","synthetic":false,"types":[]},{"text":"impl Copy for GraymapHeader","synthetic":false,"types":[]},{"text":"impl Copy for PixmapHeader","synthetic":false,"types":[]},{"text":"impl Copy for Delay","synthetic":false,"types":[]},{"text":"impl Copy for ColorType","synthetic":false,"types":[]},{"text":"impl Copy for ExtendedColorType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Primitive&gt; Copy for Rgb&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Primitive&gt; Copy for Bgr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Primitive&gt; Copy for Luma&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Primitive&gt; Copy for Rgba&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Primitive&gt; Copy for Bgra&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Primitive&gt; Copy for LumaA&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ImageFormat","synthetic":false,"types":[]},{"text":"impl Copy for Progress","synthetic":false,"types":[]}];
implementors["imageproc"] = [{"text":"impl Copy for Corner","synthetic":false,"types":[]},{"text":"impl Copy for Norm","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + PartialEq + Eq&gt; Copy for Point&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Projection","synthetic":false,"types":[]},{"text":"impl Copy for Interpolation","synthetic":false,"types":[]},{"text":"impl Copy for HaarFeature","synthetic":false,"types":[]},{"text":"impl Copy for HaarFeatureType","synthetic":false,"types":[]},{"text":"impl Copy for HogOptions","synthetic":false,"types":[]},{"text":"impl Copy for HogSpec","synthetic":false,"types":[]},{"text":"impl Copy for PolarLine","synthetic":false,"types":[]},{"text":"impl Copy for LineDetectionOptions","synthetic":false,"types":[]},{"text":"impl Copy for Rect","synthetic":false,"types":[]},{"text":"impl Copy for RectPosition","synthetic":false,"types":[]},{"text":"impl Copy for Connectivity","synthetic":false,"types":[]},{"text":"impl Copy for MatchTemplateMethod","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Extremes&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl Copy for PixelFormat","synthetic":false,"types":[]},{"text":"impl Copy for ImageInfo","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Copy for DIR","synthetic":false,"types":[]},{"text":"impl Copy for group","synthetic":false,"types":[]},{"text":"impl Copy for utimbuf","synthetic":false,"types":[]},{"text":"impl Copy for timeval","synthetic":false,"types":[]},{"text":"impl Copy for timespec","synthetic":false,"types":[]},{"text":"impl Copy for rlimit","synthetic":false,"types":[]},{"text":"impl Copy for rusage","synthetic":false,"types":[]},{"text":"impl Copy for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Copy for hostent","synthetic":false,"types":[]},{"text":"impl Copy for iovec","synthetic":false,"types":[]},{"text":"impl Copy for pollfd","synthetic":false,"types":[]},{"text":"impl Copy for winsize","synthetic":false,"types":[]},{"text":"impl Copy for linger","synthetic":false,"types":[]},{"text":"impl Copy for sigval","synthetic":false,"types":[]},{"text":"impl Copy for itimerval","synthetic":false,"types":[]},{"text":"impl Copy for tms","synthetic":false,"types":[]},{"text":"impl Copy for servent","synthetic":false,"types":[]},{"text":"impl Copy for protoent","synthetic":false,"types":[]},{"text":"impl Copy for FILE","synthetic":false,"types":[]},{"text":"impl Copy for fpos_t","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Copy for passwd","synthetic":false,"types":[]},{"text":"impl Copy for ifaddrs","synthetic":false,"types":[]},{"text":"impl Copy for fd_set","synthetic":false,"types":[]},{"text":"impl Copy for tm","synthetic":false,"types":[]},{"text":"impl Copy for msghdr","synthetic":false,"types":[]},{"text":"impl Copy for cmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for if_nameindex","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Copy for utsname","synthetic":false,"types":[]},{"text":"impl Copy for timezone","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq","synthetic":false,"types":[]},{"text":"impl Copy for aiocb","synthetic":false,"types":[]},{"text":"impl Copy for glob_t","synthetic":false,"types":[]},{"text":"impl Copy for addrinfo","synthetic":false,"types":[]},{"text":"impl Copy for mach_timebase_info","synthetic":false,"types":[]},{"text":"impl Copy for stat","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Copy for siginfo_t","synthetic":false,"types":[]},{"text":"impl Copy for sigaction","synthetic":false,"types":[]},{"text":"impl Copy for stack_t","synthetic":false,"types":[]},{"text":"impl Copy for fstore_t","synthetic":false,"types":[]},{"text":"impl Copy for radvisory","synthetic":false,"types":[]},{"text":"impl Copy for statvfs","synthetic":false,"types":[]},{"text":"impl Copy for Dl_info","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Copy for kevent64_s","synthetic":false,"types":[]},{"text":"impl Copy for dqblk","synthetic":false,"types":[]},{"text":"impl Copy for if_msghdr","synthetic":false,"types":[]},{"text":"impl Copy for termios","synthetic":false,"types":[]},{"text":"impl Copy for flock","synthetic":false,"types":[]},{"text":"impl Copy for sf_hdtr","synthetic":false,"types":[]},{"text":"impl Copy for lconv","synthetic":false,"types":[]},{"text":"impl Copy for proc_taskinfo","synthetic":false,"types":[]},{"text":"impl Copy for proc_bsdinfo","synthetic":false,"types":[]},{"text":"impl Copy for proc_taskallinfo","synthetic":false,"types":[]},{"text":"impl Copy for xsw_usage","synthetic":false,"types":[]},{"text":"impl Copy for xucred","synthetic":false,"types":[]},{"text":"impl Copy for mach_header","synthetic":false,"types":[]},{"text":"impl Copy for mach_header_64","synthetic":false,"types":[]},{"text":"impl Copy for segment_command","synthetic":false,"types":[]},{"text":"impl Copy for segment_command_64","synthetic":false,"types":[]},{"text":"impl Copy for load_command","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_dl","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_inarp","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_ctl","synthetic":false,"types":[]},{"text":"impl Copy for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for ipc_perm","synthetic":false,"types":[]},{"text":"impl Copy for sembuf","synthetic":false,"types":[]},{"text":"impl Copy for arphdr","synthetic":false,"types":[]},{"text":"impl Copy for in_addr","synthetic":false,"types":[]},{"text":"impl Copy for kevent","synthetic":false,"types":[]},{"text":"impl Copy for semid_ds","synthetic":false,"types":[]},{"text":"impl Copy for shmid_ds","synthetic":false,"types":[]},{"text":"impl Copy for proc_threadinfo","synthetic":false,"types":[]},{"text":"impl Copy for statfs","synthetic":false,"types":[]},{"text":"impl Copy for dirent","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Copy for utmpx","synthetic":false,"types":[]},{"text":"impl Copy for sigevent","synthetic":false,"types":[]},{"text":"impl Copy for semun","synthetic":false,"types":[]},{"text":"impl Copy for timeval32","synthetic":false,"types":[]},{"text":"impl Copy for if_data","synthetic":false,"types":[]},{"text":"impl Copy for bpf_hdr","synthetic":false,"types":[]},{"text":"impl Copy for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Copy for max_align_t","synthetic":false,"types":[]},{"text":"impl Copy for in6_addr","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Copy for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Copy for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZFlush","synthetic":false,"types":[]},{"text":"impl Copy for MZStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZError","synthetic":false,"types":[]},{"text":"impl Copy for DataFormat","synthetic":false,"types":[]},{"text":"impl Copy for StreamResult","synthetic":false,"types":[]}];
implementors["nano_leb128"] = [{"text":"impl Copy for SLEB128","synthetic":false,"types":[]},{"text":"impl Copy for ULEB128","synthetic":false,"types":[]},{"text":"impl Copy for LEB128DecodeError","synthetic":false,"types":[]},{"text":"impl Copy for LEB128EncodeError","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Copy for Sign","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ParseRatioError","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Copy + Float&gt; Copy for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Float&gt; Copy for NotNan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FloatIsNan","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for ParseNotNanError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Copy for Limits","synthetic":false,"types":[]},{"text":"impl Copy for FilterType","synthetic":false,"types":[]},{"text":"impl Copy for ColorType","synthetic":false,"types":[]},{"text":"impl Copy for BitDepth","synthetic":false,"types":[]},{"text":"impl Copy for PixelDimensions","synthetic":false,"types":[]},{"text":"impl Copy for Unit","synthetic":false,"types":[]},{"text":"impl Copy for DisposeOp","synthetic":false,"types":[]},{"text":"impl Copy for BlendOp","synthetic":false,"types":[]},{"text":"impl Copy for FrameControl","synthetic":false,"types":[]},{"text":"impl Copy for AnimationControl","synthetic":false,"types":[]},{"text":"impl Copy for Transformations","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Copy for YesS3","synthetic":false,"types":[]},{"text":"impl Copy for NoS3","synthetic":false,"types":[]},{"text":"impl Copy for YesS4","synthetic":false,"types":[]},{"text":"impl Copy for NoS4","synthetic":false,"types":[]},{"text":"impl Copy for YesA1","synthetic":false,"types":[]},{"text":"impl Copy for NoA1","synthetic":false,"types":[]},{"text":"impl Copy for YesA2","synthetic":false,"types":[]},{"text":"impl Copy for NoA2","synthetic":false,"types":[]},{"text":"impl Copy for YesNI","synthetic":false,"types":[]},{"text":"impl Copy for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Copy, S4:&nbsp;Copy, NI:&nbsp;Copy&gt; Copy for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Copy&gt; Copy for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Copy for vec128_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec256_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Delimiter","synthetic":false,"types":[]},{"text":"impl Copy for Spacing","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Copy for Bernoulli","synthetic":false,"types":[]},{"text":"impl Copy for BernoulliError","synthetic":false,"types":[]},{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Cauchy","synthetic":false,"types":[]},{"text":"impl Copy for Exp1","synthetic":false,"types":[]},{"text":"impl Copy for Exp","synthetic":false,"types":[]},{"text":"impl Copy for Gamma","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquared","synthetic":false,"types":[]},{"text":"impl Copy for FisherF","synthetic":false,"types":[]},{"text":"impl Copy for StudentT","synthetic":false,"types":[]},{"text":"impl Copy for Beta","synthetic":false,"types":[]},{"text":"impl Copy for StandardNormal","synthetic":false,"types":[]},{"text":"impl Copy for Normal","synthetic":false,"types":[]},{"text":"impl Copy for LogNormal","synthetic":false,"types":[]},{"text":"impl Copy for Pareto","synthetic":false,"types":[]},{"text":"impl Copy for Poisson","synthetic":false,"types":[]},{"text":"impl Copy for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy + SampleUniform&gt; Copy for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UniformDuration","synthetic":false,"types":[]},{"text":"impl Copy for UnitCircle","synthetic":false,"types":[]},{"text":"impl Copy for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Copy for Weibull","synthetic":false,"types":[]},{"text":"impl Copy for WeightedError","synthetic":false,"types":[]},{"text":"impl Copy for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Copy for Open01","synthetic":false,"types":[]},{"text":"impl Copy for Standard","synthetic":false,"types":[]},{"text":"impl Copy for ThreadRng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Copy for OsRng","synthetic":false,"types":[]}];
implementors["rand_distr"] = [{"text":"impl Copy for UnitSphere","synthetic":false,"types":[]},{"text":"impl Copy for UnitBall","synthetic":false,"types":[]},{"text":"impl Copy for UnitCircle","synthetic":false,"types":[]},{"text":"impl Copy for UnitDisc","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Gamma&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for ChiSquared&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquaredError","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for FisherF&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FisherFError","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for StudentT&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Beta&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for BetaError","synthetic":false,"types":[]},{"text":"impl Copy for StandardNormal","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Normal&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for LogNormal&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Exp1","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Exp&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Pareto&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Pert&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for PertError","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Poisson&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Cauchy&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Triangular&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for TriangularError","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Weibull&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["rulinalg"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for AbsoluteElementwiseComparator&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ExactElementwiseComparator","synthetic":false,"types":[]},{"text":"impl Copy for UlpElementwiseComparator","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FloatElementwiseComparator&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Parity","synthetic":false,"types":[]},{"text":"impl Copy for Axes","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy + 'a&gt; Copy for MatrixSlice&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy + 'a&gt; Copy for Row&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy + 'a&gt; Copy for Column&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UlpComparisonResult","synthetic":false,"types":[]}];
implementors["rusttype"] = [{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Point&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Vector&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Line","synthetic":false,"types":[]},{"text":"impl Copy for Curve","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for Rect&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Codepoint","synthetic":false,"types":[]},{"text":"impl Copy for GlyphId","synthetic":false,"types":[]},{"text":"impl Copy for HMetrics","synthetic":false,"types":[]},{"text":"impl Copy for VMetrics","synthetic":false,"types":[]},{"text":"impl Copy for Scale","synthetic":false,"types":[]},{"text":"impl Copy for Segment","synthetic":false,"types":[]}];
implementors["scroll"] = [{"text":"impl Copy for StrCtx","synthetic":false,"types":[]},{"text":"impl Copy for Endian","synthetic":false,"types":[]},{"text":"impl Copy for Uleb128","synthetic":false,"types":[]},{"text":"impl Copy for Sleb128","synthetic":false,"types":[]}];
implementors["stb_truetype"] = [{"text":"impl&lt;Data:&nbsp;Copy + Deref&lt;Target = [u8]&gt;&gt; Copy for FontInfo&lt;Data&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Vertex","synthetic":false,"types":[]},{"text":"impl Copy for VertexType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Rect&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for HMetrics","synthetic":false,"types":[]},{"text":"impl Copy for VMetrics","synthetic":false,"types":[]},{"text":"impl Copy for PlatformId","synthetic":false,"types":[]},{"text":"impl Copy for UnicodeEid","synthetic":false,"types":[]},{"text":"impl Copy for MicrosoftEid","synthetic":false,"types":[]},{"text":"impl Copy for MacEid","synthetic":false,"types":[]},{"text":"impl Copy for MicrosoftLang","synthetic":false,"types":[]},{"text":"impl Copy for MacLang","synthetic":false,"types":[]},{"text":"impl Copy for PlatformEncodingLanguageId","synthetic":false,"types":[]},{"text":"impl&lt;'a, Data:&nbsp;Copy + Deref&lt;Target = [u8]&gt;&gt; Copy for FontNameIter&lt;'a, Data&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Copy for Underscore","synthetic":false,"types":[]},{"text":"impl Copy for Abstract","synthetic":false,"types":[]},{"text":"impl Copy for As","synthetic":false,"types":[]},{"text":"impl Copy for Async","synthetic":false,"types":[]},{"text":"impl Copy for Auto","synthetic":false,"types":[]},{"text":"impl Copy for Await","synthetic":false,"types":[]},{"text":"impl Copy for Become","synthetic":false,"types":[]},{"text":"impl Copy for Box","synthetic":false,"types":[]},{"text":"impl Copy for Break","synthetic":false,"types":[]},{"text":"impl Copy for Const","synthetic":false,"types":[]},{"text":"impl Copy for Continue","synthetic":false,"types":[]},{"text":"impl Copy for Crate","synthetic":false,"types":[]},{"text":"impl Copy for Default","synthetic":false,"types":[]},{"text":"impl Copy for Do","synthetic":false,"types":[]},{"text":"impl Copy for Dyn","synthetic":false,"types":[]},{"text":"impl Copy for Else","synthetic":false,"types":[]},{"text":"impl Copy for Enum","synthetic":false,"types":[]},{"text":"impl Copy for Extern","synthetic":false,"types":[]},{"text":"impl Copy for Final","synthetic":false,"types":[]},{"text":"impl Copy for Fn","synthetic":false,"types":[]},{"text":"impl Copy for For","synthetic":false,"types":[]},{"text":"impl Copy for If","synthetic":false,"types":[]},{"text":"impl Copy for Impl","synthetic":false,"types":[]},{"text":"impl Copy for In","synthetic":false,"types":[]},{"text":"impl Copy for Let","synthetic":false,"types":[]},{"text":"impl Copy for Loop","synthetic":false,"types":[]},{"text":"impl Copy for Macro","synthetic":false,"types":[]},{"text":"impl Copy for Match","synthetic":false,"types":[]},{"text":"impl Copy for Mod","synthetic":false,"types":[]},{"text":"impl Copy for Move","synthetic":false,"types":[]},{"text":"impl Copy for Mut","synthetic":false,"types":[]},{"text":"impl Copy for Override","synthetic":false,"types":[]},{"text":"impl Copy for Priv","synthetic":false,"types":[]},{"text":"impl Copy for Pub","synthetic":false,"types":[]},{"text":"impl Copy for Ref","synthetic":false,"types":[]},{"text":"impl Copy for Return","synthetic":false,"types":[]},{"text":"impl Copy for SelfType","synthetic":false,"types":[]},{"text":"impl Copy for SelfValue","synthetic":false,"types":[]},{"text":"impl Copy for Static","synthetic":false,"types":[]},{"text":"impl Copy for Struct","synthetic":false,"types":[]},{"text":"impl Copy for Super","synthetic":false,"types":[]},{"text":"impl Copy for Trait","synthetic":false,"types":[]},{"text":"impl Copy for Try","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Typeof","synthetic":false,"types":[]},{"text":"impl Copy for Union","synthetic":false,"types":[]},{"text":"impl Copy for Unsafe","synthetic":false,"types":[]},{"text":"impl Copy for Unsized","synthetic":false,"types":[]},{"text":"impl Copy for Use","synthetic":false,"types":[]},{"text":"impl Copy for Virtual","synthetic":false,"types":[]},{"text":"impl Copy for Where","synthetic":false,"types":[]},{"text":"impl Copy for While","synthetic":false,"types":[]},{"text":"impl Copy for Yield","synthetic":false,"types":[]},{"text":"impl Copy for Add","synthetic":false,"types":[]},{"text":"impl Copy for AddEq","synthetic":false,"types":[]},{"text":"impl Copy for And","synthetic":false,"types":[]},{"text":"impl Copy for AndAnd","synthetic":false,"types":[]},{"text":"impl Copy for AndEq","synthetic":false,"types":[]},{"text":"impl Copy for At","synthetic":false,"types":[]},{"text":"impl Copy for Bang","synthetic":false,"types":[]},{"text":"impl Copy for Caret","synthetic":false,"types":[]},{"text":"impl Copy for CaretEq","synthetic":false,"types":[]},{"text":"impl Copy for Colon","synthetic":false,"types":[]},{"text":"impl Copy for Colon2","synthetic":false,"types":[]},{"text":"impl Copy for Comma","synthetic":false,"types":[]},{"text":"impl Copy for Div","synthetic":false,"types":[]},{"text":"impl Copy for DivEq","synthetic":false,"types":[]},{"text":"impl Copy for Dollar","synthetic":false,"types":[]},{"text":"impl Copy for Dot","synthetic":false,"types":[]},{"text":"impl Copy for Dot2","synthetic":false,"types":[]},{"text":"impl Copy for Dot3","synthetic":false,"types":[]},{"text":"impl Copy for DotDotEq","synthetic":false,"types":[]},{"text":"impl Copy for Eq","synthetic":false,"types":[]},{"text":"impl Copy for EqEq","synthetic":false,"types":[]},{"text":"impl Copy for Ge","synthetic":false,"types":[]},{"text":"impl Copy for Gt","synthetic":false,"types":[]},{"text":"impl Copy for Le","synthetic":false,"types":[]},{"text":"impl Copy for Lt","synthetic":false,"types":[]},{"text":"impl Copy for MulEq","synthetic":false,"types":[]},{"text":"impl Copy for Ne","synthetic":false,"types":[]},{"text":"impl Copy for Or","synthetic":false,"types":[]},{"text":"impl Copy for OrEq","synthetic":false,"types":[]},{"text":"impl Copy for OrOr","synthetic":false,"types":[]},{"text":"impl Copy for Pound","synthetic":false,"types":[]},{"text":"impl Copy for Question","synthetic":false,"types":[]},{"text":"impl Copy for RArrow","synthetic":false,"types":[]},{"text":"impl Copy for LArrow","synthetic":false,"types":[]},{"text":"impl Copy for Rem","synthetic":false,"types":[]},{"text":"impl Copy for RemEq","synthetic":false,"types":[]},{"text":"impl Copy for FatArrow","synthetic":false,"types":[]},{"text":"impl Copy for Semi","synthetic":false,"types":[]},{"text":"impl Copy for Shl","synthetic":false,"types":[]},{"text":"impl Copy for ShlEq","synthetic":false,"types":[]},{"text":"impl Copy for Shr","synthetic":false,"types":[]},{"text":"impl Copy for ShrEq","synthetic":false,"types":[]},{"text":"impl Copy for Star","synthetic":false,"types":[]},{"text":"impl Copy for Sub","synthetic":false,"types":[]},{"text":"impl Copy for SubEq","synthetic":false,"types":[]},{"text":"impl Copy for Tilde","synthetic":false,"types":[]},{"text":"impl Copy for Brace","synthetic":false,"types":[]},{"text":"impl Copy for Bracket","synthetic":false,"types":[]},{"text":"impl Copy for Paren","synthetic":false,"types":[]},{"text":"impl Copy for Group","synthetic":false,"types":[]},{"text":"impl Copy for AttrStyle","synthetic":false,"types":[]},{"text":"impl Copy for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Copy for BinOp","synthetic":false,"types":[]},{"text":"impl Copy for UnOp","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Copy for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
implementors["synstructure"] = [{"text":"impl Copy for AddBounds","synthetic":false,"types":[]},{"text":"impl Copy for BindStyle","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for VariantAst&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["term"] = [{"text":"impl Copy for Attr","synthetic":false,"types":[]}];
implementors["tiff"] = [{"text":"impl Copy for Tag","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for PhotometricInterpretation","synthetic":false,"types":[]},{"text":"impl Copy for CompressionMethod","synthetic":false,"types":[]},{"text":"impl Copy for PlanarConfiguration","synthetic":false,"types":[]},{"text":"impl Copy for Predictor","synthetic":false,"types":[]},{"text":"impl Copy for ColorType","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Copy for Duration","synthetic":false,"types":[]},{"text":"impl Copy for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Copy for Timespec","synthetic":false,"types":[]},{"text":"impl Copy for PreciseTime","synthetic":false,"types":[]},{"text":"impl Copy for SteadyTime","synthetic":false,"types":[]},{"text":"impl Copy for Tm","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]}];
implementors["uuid"] = [{"text":"impl Copy for Hyphenated","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for HyphenatedRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Simple","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for SimpleRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Urn","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for UrnRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Version","synthetic":false,"types":[]},{"text":"impl Copy for Variant","synthetic":false,"types":[]},{"text":"impl Copy for Uuid","synthetic":false,"types":[]}];
implementors["wld"] = [{"text":"impl Copy for AnglerQuestFish","synthetic":false,"types":[]},{"text":"impl Copy for BlockShape","synthetic":false,"types":[]},{"text":"impl Copy for BlockType","synthetic":false,"types":[]},{"text":"impl Copy for EntityType","synthetic":false,"types":[]},{"text":"impl Copy for EvilType","synthetic":false,"types":[]},{"text":"impl Copy for HardmodeOreType","synthetic":false,"types":[]},{"text":"impl Copy for InvasionType","synthetic":false,"types":[]},{"text":"impl Copy for ItemType","synthetic":false,"types":[]},{"text":"impl Copy for LiquidType","synthetic":false,"types":[]},{"text":"impl Copy for RLEType","synthetic":false,"types":[]},{"text":"impl Copy for TBool","synthetic":false,"types":[]},{"text":"impl Copy for TileEntityType","synthetic":false,"types":[]},{"text":"impl Copy for WallType","synthetic":false,"types":[]},{"text":"impl Copy for Block","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for BlockCtx&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl Copy for HardmodeOre","synthetic":false,"types":[]},{"text":"impl Copy for Offsets","synthetic":false,"types":[]},{"text":"impl Copy for House","synthetic":false,"types":[]},{"text":"impl Copy for ItemStack","synthetic":false,"types":[]},{"text":"impl Copy for Bounds","synthetic":false,"types":[]},{"text":"impl Copy for QuadrantStyle","synthetic":false,"types":[]},{"text":"impl Copy for WorldStyle","synthetic":false,"types":[]},{"text":"impl Copy for TUuid","synthetic":false,"types":[]},{"text":"impl Copy for BossesSlain","synthetic":false,"types":[]},{"text":"impl Copy for BossesSlain2","synthetic":false,"types":[]},{"text":"impl Copy for PillarStatus","synthetic":false,"types":[]},{"text":"impl Copy for SavedNPCs","synthetic":false,"types":[]},{"text":"impl Copy for EventsCompleted","synthetic":false,"types":[]},{"text":"impl Copy for ShadowOrbStatus","synthetic":false,"types":[]},{"text":"impl Copy for RainStatus","synthetic":false,"types":[]},{"text":"impl Copy for InvasionStatus","synthetic":false,"types":[]},{"text":"impl Copy for Backgrounds","synthetic":false,"types":[]},{"text":"impl Copy for Clouds","synthetic":false,"types":[]},{"text":"impl Copy for SandstormStatus","synthetic":false,"types":[]},{"text":"impl Copy for OldOnesArmyStatus","synthetic":false,"types":[]},{"text":"impl Copy for LogicSensor","synthetic":false,"types":[]},{"text":"impl Copy for TileEntity","synthetic":false,"types":[]},{"text":"impl Copy for Liquid","synthetic":false,"types":[]},{"text":"impl Copy for Wiring","synthetic":false,"types":[]},{"text":"impl Copy for RunLength","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for WorldCtx&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for TileCtx&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Wall","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()